
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f78  08000f78  00010f80  2**0
                  CONTENTS
  4 .ARM          00000000  08000f78  08000f78  00010f80  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f78  08000f80  00010f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f78  08000f78  00010f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f7c  08000f7c  00010f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010f80  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000175d  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000533  00000000  00000000  0001270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00012c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00012de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000248f  00000000  00000000  00012f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001acf  00000000  00000000  000153d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b15  00000000  00000000  00016ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000209bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000628  00000000  00000000  00020a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f3c 	.word	0x08000f3c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000f3c 	.word	0x08000f3c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
void delay(void);
uint8_t SPI_VeriResponse(uint8_t ackbyte);



int main() {
 80001f8:	b5b0      	push	{r4, r5, r7, lr}
 80001fa:	b092      	sub	sp, #72	; 0x48
 80001fc:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 80001fe:	23ff      	movs	r3, #255	; 0xff
 8000200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t dummy_read;

	//initialize GPIO button
	GPIO_ButtonInit();
 8000204:	f000 fa0e 	bl	8000624 <GPIO_ButtonInit>

	//Function used to initialize the GPIO pins the behave as SPI2
	SPI2_GPIOInits();
 8000208:	f000 f9c4 	bl	8000594 <SPI2_GPIOInits>

	//initialize SPI2 peripheral parameter
	SPI2_Inits();
 800020c:	f000 f9ec 	bl	80005e8 <SPI2_Inits>
	 * Making SSOE 1 does NSS output enabled
	 * The NSS pin is automatically managed by the hardware
	 * i.e.  when SPE = 1, NSS will be pulled to low
	 * and NSS pin will be high when SPE =0
	 */
	SPI_SSOEConfig(SPI2, ENABLE);
 8000210:	2101      	movs	r1, #1
 8000212:	48c9      	ldr	r0, [pc, #804]	; (8000538 <main+0x340>)
 8000214:	f000 fe52 	bl	8000ebc <SPI_SSOEConfig>

	while (1) {

		//wait until btn is pressed
		while (!(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)));
 8000218:	bf00      	nop
 800021a:	2100      	movs	r1, #0
 800021c:	48c7      	ldr	r0, [pc, #796]	; (800053c <main+0x344>)
 800021e:	f000 fceb 	bl	8000bf8 <GPIO_ReadFromInputPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d0f8      	beq.n	800021a <main+0x22>
		delay();
 8000228:	f000 fa14 	bl	8000654 <delay>

		//enable SPI2 peripheral
		SPI_PeriControl(SPI2, ENABLE);
 800022c:	2101      	movs	r1, #1
 800022e:	48c2      	ldr	r0, [pc, #776]	; (8000538 <main+0x340>)
 8000230:	f000 fe28 	bl	8000e84 <SPI_PeriControl>

		//1. CMD_LED_CTRL <pin no(1)> <value(1)>

		uint8_t cmdcode = CMD_LED_CTRL;
 8000234:	2350      	movs	r3, #80	; 0x50
 8000236:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		uint8_t ackbyte;
		uint8_t args[2];

		//Send command
		SPI_SendData(SPI2, &cmdcode, 1);
 800023a:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 800023e:	2201      	movs	r2, #1
 8000240:	4619      	mov	r1, r3
 8000242:	48bd      	ldr	r0, [pc, #756]	; (8000538 <main+0x340>)
 8000244:	f000 fdae 	bl	8000da4 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000248:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800024c:	2201      	movs	r2, #1
 800024e:	4619      	mov	r1, r3
 8000250:	48b9      	ldr	r0, [pc, #740]	; (8000538 <main+0x340>)
 8000252:	f000 fddf 	bl	8000e14 <SPI_ReceiveData>

		//send some dummy bit (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000256:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800025a:	2201      	movs	r2, #1
 800025c:	4619      	mov	r1, r3
 800025e:	48b6      	ldr	r0, [pc, #728]	; (8000538 <main+0x340>)
 8000260:	f000 fda0 	bl	8000da4 <SPI_SendData>

		//receive the ackbyte and read
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000264:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000268:	2201      	movs	r2, #1
 800026a:	4619      	mov	r1, r3
 800026c:	48b2      	ldr	r0, [pc, #712]	; (8000538 <main+0x340>)
 800026e:	f000 fdd1 	bl	8000e14 <SPI_ReceiveData>
		if (SPI_VeriResponse(ackbyte)) //ACK received
 8000272:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fa02 	bl	8000680 <SPI_VeriResponse>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d013      	beq.n	80002aa <main+0xb2>
				{
			//send arguments
			args[0] = LED_PIN;
 8000282:	2309      	movs	r3, #9
 8000284:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			args[1] = LED_ON;
 8000288:	2301      	movs	r3, #1
 800028a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

			//send arguments
			SPI_SendData(SPI2, args, 2);
 800028e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000292:	2202      	movs	r2, #2
 8000294:	4619      	mov	r1, r3
 8000296:	48a8      	ldr	r0, [pc, #672]	; (8000538 <main+0x340>)
 8000298:	f000 fd84 	bl	8000da4 <SPI_SendData>

			//receive dummy
			SPI_ReceiveData(SPI2, args, 2);
 800029c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002a0:	2202      	movs	r2, #2
 80002a2:	4619      	mov	r1, r3
 80002a4:	48a4      	ldr	r0, [pc, #656]	; (8000538 <main+0x340>)
 80002a6:	f000 fdb5 	bl	8000e14 <SPI_ReceiveData>
		} //END CMD_LED_CNTRL

		//2. CMD_SENSOR_READ <analog pin number(1)>

		//wait until btn is pressed
		while (!(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)));
 80002aa:	bf00      	nop
 80002ac:	2100      	movs	r1, #0
 80002ae:	48a3      	ldr	r0, [pc, #652]	; (800053c <main+0x344>)
 80002b0:	f000 fca2 	bl	8000bf8 <GPIO_ReadFromInputPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f8      	beq.n	80002ac <main+0xb4>
		delay();
 80002ba:	f000 f9cb 	bl	8000654 <delay>

		cmdcode = CMD_SENSOR_READ;
 80002be:	2351      	movs	r3, #81	; 0x51
 80002c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		//send command
		SPI_SendData(SPI2, &cmdcode, 1);
 80002c4:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 80002c8:	2201      	movs	r2, #1
 80002ca:	4619      	mov	r1, r3
 80002cc:	489a      	ldr	r0, [pc, #616]	; (8000538 <main+0x340>)
 80002ce:	f000 fd69 	bl	8000da4 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80002d2:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80002d6:	2201      	movs	r2, #1
 80002d8:	4619      	mov	r1, r3
 80002da:	4897      	ldr	r0, [pc, #604]	; (8000538 <main+0x340>)
 80002dc:	f000 fd9a 	bl	8000e14 <SPI_ReceiveData>

		//send some dummy bit (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 80002e0:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80002e4:	2201      	movs	r2, #1
 80002e6:	4619      	mov	r1, r3
 80002e8:	4893      	ldr	r0, [pc, #588]	; (8000538 <main+0x340>)
 80002ea:	f000 fd5b 	bl	8000da4 <SPI_SendData>

		//receive the ackbyte and read
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 80002ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002f2:	2201      	movs	r2, #1
 80002f4:	4619      	mov	r1, r3
 80002f6:	4890      	ldr	r0, [pc, #576]	; (8000538 <main+0x340>)
 80002f8:	f000 fd8c 	bl	8000e14 <SPI_ReceiveData>
		if (SPI_VeriResponse(ackbyte)) //ACK received
 80002fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f9bd 	bl	8000680 <SPI_VeriResponse>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d020      	beq.n	800034e <main+0x156>
				{
			//send arguments
			args[0] = ANALOG_PIN0;
 800030c:	2300      	movs	r3, #0
 800030e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			//send arguments
			SPI_SendData(SPI2, args, 1);
 8000312:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000316:	2201      	movs	r2, #1
 8000318:	4619      	mov	r1, r3
 800031a:	4887      	ldr	r0, [pc, #540]	; (8000538 <main+0x340>)
 800031c:	f000 fd42 	bl	8000da4 <SPI_SendData>

			//do dummy read to clear RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000320:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000324:	2201      	movs	r2, #1
 8000326:	4619      	mov	r1, r3
 8000328:	4883      	ldr	r0, [pc, #524]	; (8000538 <main+0x340>)
 800032a:	f000 fd73 	bl	8000e14 <SPI_ReceiveData>

			//delay so that slave is ready for next data
			delay();
 800032e:	f000 f991 	bl	8000654 <delay>

			//send some dummy bit (1byte) to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000332:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8000336:	2201      	movs	r2, #1
 8000338:	4619      	mov	r1, r3
 800033a:	487f      	ldr	r0, [pc, #508]	; (8000538 <main+0x340>)
 800033c:	f000 fd32 	bl	8000da4 <SPI_SendData>

			uint8_t analog_read;
			SPI_ReceiveData(SPI2, &analog_read, 1);
 8000340:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	487b      	ldr	r0, [pc, #492]	; (8000538 <main+0x340>)
 800034a:	f000 fd63 	bl	8000e14 <SPI_ReceiveData>
		}

		//3. CMD_LED_READ

		//wait till button is pressed
		while (!(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)));
 800034e:	bf00      	nop
 8000350:	2100      	movs	r1, #0
 8000352:	487a      	ldr	r0, [pc, #488]	; (800053c <main+0x344>)
 8000354:	f000 fc50 	bl	8000bf8 <GPIO_ReadFromInputPin>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f8      	beq.n	8000350 <main+0x158>
		delay();
 800035e:	f000 f979 	bl	8000654 <delay>

		cmdcode = CMD_LED_READ;
 8000362:	2352      	movs	r3, #82	; 0x52
 8000364:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		//send command
		SPI_SendData(SPI2, &cmdcode, 1);
 8000368:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 800036c:	2201      	movs	r2, #1
 800036e:	4619      	mov	r1, r3
 8000370:	4871      	ldr	r0, [pc, #452]	; (8000538 <main+0x340>)
 8000372:	f000 fd17 	bl	8000da4 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000376:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800037a:	2201      	movs	r2, #1
 800037c:	4619      	mov	r1, r3
 800037e:	486e      	ldr	r0, [pc, #440]	; (8000538 <main+0x340>)
 8000380:	f000 fd48 	bl	8000e14 <SPI_ReceiveData>

		//send some dummy bit (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000384:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	486a      	ldr	r0, [pc, #424]	; (8000538 <main+0x340>)
 800038e:	f000 fd09 	bl	8000da4 <SPI_SendData>

		//receive the ackbyte and read
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000392:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000396:	2201      	movs	r2, #1
 8000398:	4619      	mov	r1, r3
 800039a:	4867      	ldr	r0, [pc, #412]	; (8000538 <main+0x340>)
 800039c:	f000 fd3a 	bl	8000e14 <SPI_ReceiveData>

		if (SPI_VeriResponse(ackbyte)) //ACK received
 80003a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 f96b 	bl	8000680 <SPI_VeriResponse>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d020      	beq.n	80003f2 <main+0x1fa>
				{
			//send arguments
			args[0] = LED_PIN;
 80003b0:	2309      	movs	r3, #9
 80003b2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			//send arg
			SPI_SendData(SPI2, args, 1);
 80003b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80003ba:	2201      	movs	r2, #1
 80003bc:	4619      	mov	r1, r3
 80003be:	485e      	ldr	r0, [pc, #376]	; (8000538 <main+0x340>)
 80003c0:	f000 fcf0 	bl	8000da4 <SPI_SendData>

			//do dummy read
			SPI_ReceiveData(SPI2, &dummy_read, 2);
 80003c4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80003c8:	2202      	movs	r2, #2
 80003ca:	4619      	mov	r1, r3
 80003cc:	485a      	ldr	r0, [pc, #360]	; (8000538 <main+0x340>)
 80003ce:	f000 fd21 	bl	8000e14 <SPI_ReceiveData>

			delay();
 80003d2:	f000 f93f 	bl	8000654 <delay>

			//send dummy
			SPI_SendData(SPI2, &dummy_write, 1);
 80003d6:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80003da:	2201      	movs	r2, #1
 80003dc:	4619      	mov	r1, r3
 80003de:	4856      	ldr	r0, [pc, #344]	; (8000538 <main+0x340>)
 80003e0:	f000 fce0 	bl	8000da4 <SPI_SendData>

			uint8_t led_status;
			SPI_ReceiveData(SPI2, &led_status, 1);
 80003e4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80003e8:	2201      	movs	r2, #1
 80003ea:	4619      	mov	r1, r3
 80003ec:	4852      	ldr	r0, [pc, #328]	; (8000538 <main+0x340>)
 80003ee:	f000 fd11 	bl	8000e14 <SPI_ReceiveData>
		}

		//4.CMD_PRINTF  <len(2)> <message(len)>
		//wait till button is pressed
		while (!(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)));
 80003f2:	bf00      	nop
 80003f4:	2100      	movs	r1, #0
 80003f6:	4851      	ldr	r0, [pc, #324]	; (800053c <main+0x344>)
 80003f8:	f000 fbfe 	bl	8000bf8 <GPIO_ReadFromInputPin>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0f8      	beq.n	80003f4 <main+0x1fc>
		delay();
 8000402:	f000 f927 	bl	8000654 <delay>

		cmdcode = CMD_PRINT;
 8000406:	2353      	movs	r3, #83	; 0x53
 8000408:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		//send command
		SPI_SendData(SPI2, &cmdcode, 1);
 800040c:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 8000410:	2201      	movs	r2, #1
 8000412:	4619      	mov	r1, r3
 8000414:	4848      	ldr	r0, [pc, #288]	; (8000538 <main+0x340>)
 8000416:	f000 fcc5 	bl	8000da4 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 800041a:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800041e:	2201      	movs	r2, #1
 8000420:	4619      	mov	r1, r3
 8000422:	4845      	ldr	r0, [pc, #276]	; (8000538 <main+0x340>)
 8000424:	f000 fcf6 	bl	8000e14 <SPI_ReceiveData>

		//send some dummy bit (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000428:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 800042c:	2201      	movs	r2, #1
 800042e:	4619      	mov	r1, r3
 8000430:	4841      	ldr	r0, [pc, #260]	; (8000538 <main+0x340>)
 8000432:	f000 fcb7 	bl	8000da4 <SPI_SendData>

		//receive the ackbyte and read
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800043a:	2201      	movs	r2, #1
 800043c:	4619      	mov	r1, r3
 800043e:	483e      	ldr	r0, [pc, #248]	; (8000538 <main+0x340>)
 8000440:	f000 fce8 	bl	8000e14 <SPI_ReceiveData>

		char message[] = "Hello World! Embedded Engineer hear";
 8000444:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <main+0x348>)
 8000446:	1d3c      	adds	r4, r7, #4
 8000448:	461d      	mov	r5, r3
 800044a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800044c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800044e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000452:	682b      	ldr	r3, [r5, #0]
 8000454:	6023      	str	r3, [r4, #0]
		if (SPI_VeriResponse(ackbyte)) //ACK received
 8000456:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800045a:	4618      	mov	r0, r3
 800045c:	f000 f910 	bl	8000680 <SPI_VeriResponse>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d032      	beq.n	80004cc <main+0x2d4>
				{
			//send arguments
			args[0] = strlen((char*) message);
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff febd 	bl	80001e8 <strlen>
 800046e:	4603      	mov	r3, r0
 8000470:	b2db      	uxtb	r3, r3
 8000472:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

			//send arg
			SPI_SendData(SPI2, args, 1);
 8000476:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800047a:	2201      	movs	r2, #1
 800047c:	4619      	mov	r1, r3
 800047e:	482e      	ldr	r0, [pc, #184]	; (8000538 <main+0x340>)
 8000480:	f000 fc90 	bl	8000da4 <SPI_SendData>

			//do dummy read
			SPI_ReceiveData(SPI2, &dummy_read, 2);
 8000484:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8000488:	2202      	movs	r2, #2
 800048a:	4619      	mov	r1, r3
 800048c:	482a      	ldr	r0, [pc, #168]	; (8000538 <main+0x340>)
 800048e:	f000 fcc1 	bl	8000e14 <SPI_ReceiveData>

			delay();
 8000492:	f000 f8df 	bl	8000654 <delay>

			//send message
			for (int i = 0; i < args[0]; i++) {
 8000496:	2300      	movs	r3, #0
 8000498:	647b      	str	r3, [r7, #68]	; 0x44
 800049a:	e011      	b.n	80004c0 <main+0x2c8>
				SPI_SendData(SPI2, &message[i], 1); //NOTE
 800049c:	1d3a      	adds	r2, r7, #4
 800049e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004a0:	4413      	add	r3, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	4619      	mov	r1, r3
 80004a6:	4824      	ldr	r0, [pc, #144]	; (8000538 <main+0x340>)
 80004a8:	f000 fc7c 	bl	8000da4 <SPI_SendData>
				//receive dummy
				SPI_ReceiveData(SPI2, &dummy_read,1);
 80004ac:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80004b0:	2201      	movs	r2, #1
 80004b2:	4619      	mov	r1, r3
 80004b4:	4820      	ldr	r0, [pc, #128]	; (8000538 <main+0x340>)
 80004b6:	f000 fcad 	bl	8000e14 <SPI_ReceiveData>
			for (int i = 0; i < args[0]; i++) {
 80004ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004bc:	3301      	adds	r3, #1
 80004be:	647b      	str	r3, [r7, #68]	; 0x44
 80004c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80004c4:	461a      	mov	r2, r3
 80004c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80004c8:	4293      	cmp	r3, r2
 80004ca:	dbe7      	blt.n	800049c <main+0x2a4>
			}
		}
		//5. CMD_ID_READ
		//wait till button is pressed
		while (!(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0)));
 80004cc:	bf00      	nop
 80004ce:	2100      	movs	r1, #0
 80004d0:	481a      	ldr	r0, [pc, #104]	; (800053c <main+0x344>)
 80004d2:	f000 fb91 	bl	8000bf8 <GPIO_ReadFromInputPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0f8      	beq.n	80004ce <main+0x2d6>
		delay();
 80004dc:	f000 f8ba 	bl	8000654 <delay>

		cmdcode = CMD_ID_READ;
 80004e0:	2354      	movs	r3, #84	; 0x54
 80004e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		//send command
		SPI_SendData(SPI2, &cmdcode, 1);
 80004e6:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 80004ea:	2201      	movs	r2, #1
 80004ec:	4619      	mov	r1, r3
 80004ee:	4812      	ldr	r0, [pc, #72]	; (8000538 <main+0x340>)
 80004f0:	f000 fc58 	bl	8000da4 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_ReceiveData(SPI2, &dummy_read, 1);
 80004f4:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	480e      	ldr	r0, [pc, #56]	; (8000538 <main+0x340>)
 80004fe:	f000 fc89 	bl	8000e14 <SPI_ReceiveData>

		//send some dummy bit (1byte) to fetch the response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000502:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <main+0x340>)
 800050c:	f000 fc4a 	bl	8000da4 <SPI_SendData>

		//receive the ackbyte and read
		SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000514:	2201      	movs	r2, #1
 8000516:	4619      	mov	r1, r3
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x340>)
 800051a:	f000 fc7b 	bl	8000e14 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	643b      	str	r3, [r7, #64]	; 0x40
		if (SPI_VeriResponse(ackbyte)) //ACK received
 8000522:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000526:	4618      	mov	r0, r3
 8000528:	f000 f8aa 	bl	8000680 <SPI_VeriResponse>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d021      	beq.n	8000576 <main+0x37e>
				{
			//read 10 bytes id from slave
			for (i=0; i < 10; i++)
 8000532:	2300      	movs	r3, #0
 8000534:	643b      	str	r3, [r7, #64]	; 0x40
 8000536:	e018      	b.n	800056a <main+0x372>
 8000538:	40003800 	.word	0x40003800
 800053c:	40020000 	.word	0x40020000
 8000540:	08000f54 	.word	0x08000f54
			{
				//send dummy
				SPI_SendData(SPI2, &dummy_write, 1);
 8000544:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	4810      	ldr	r0, [pc, #64]	; (8000590 <main+0x398>)
 800054e:	f000 fc29 	bl	8000da4 <SPI_SendData>
				SPI_ReceiveData(SPI2, &id[i], 1);
 8000552:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000558:	4413      	add	r3, r2
 800055a:	2201      	movs	r2, #1
 800055c:	4619      	mov	r1, r3
 800055e:	480c      	ldr	r0, [pc, #48]	; (8000590 <main+0x398>)
 8000560:	f000 fc58 	bl	8000e14 <SPI_ReceiveData>
			for (i=0; i < 10; i++)
 8000564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000566:	3301      	adds	r3, #1
 8000568:	643b      	str	r3, [r7, #64]	; 0x40
 800056a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800056c:	2b09      	cmp	r3, #9
 800056e:	d9e9      	bls.n	8000544 <main+0x34c>
			}

			id[10] = '\0';
 8000570:	2300      	movs	r3, #0
 8000572:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			//printf("CMD_ID %s\n",id);
		}

		//wait until transmission is done
		while (SPI_GetFlagStatus(SPI2, (1 << SPI_SR_BSY)))
 8000576:	bf00      	nop
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <main+0x398>)
 800057c:	f000 fbfe 	bl	8000d7c <SPI_GetFlagStatus>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1f8      	bne.n	8000578 <main+0x380>
			;

		//disable SPI2 peripheral
		SPI_PeriControl(SPI2, DISABLE);
 8000586:	2100      	movs	r1, #0
 8000588:	4801      	ldr	r0, [pc, #4]	; (8000590 <main+0x398>)
 800058a:	f000 fc7b 	bl	8000e84 <SPI_PeriControl>
	while (1) {
 800058e:	e643      	b.n	8000218 <main+0x20>
 8000590:	40003800 	.word	0x40003800

08000594 <SPI2_GPIOInits>:
	}

	return 0;
}

void SPI2_GPIOInits(void) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI2Pins;
	//MOSI
	SPI2Pins.pGPIOx = GPIOB;
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <SPI2_GPIOInits+0x50>)
 800059c:	607b      	str	r3, [r7, #4]
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800059e:	230f      	movs	r3, #15
 80005a0:	723b      	strb	r3, [r7, #8]
	SPI2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80005a2:	2302      	movs	r3, #2
 80005a4:	727b      	strb	r3, [r7, #9]
	SPI2Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80005a6:	2302      	movs	r3, #2
 80005a8:	72bb      	strb	r3, [r7, #10]
	SPI2Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80005aa:	2300      	movs	r3, #0
 80005ac:	72fb      	strb	r3, [r7, #11]
	SPI2Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80005ae:	2300      	movs	r3, #0
 80005b0:	733b      	strb	r3, [r7, #12]
	SPI2Pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_MODE_AF15;
 80005b2:	230f      	movs	r3, #15
 80005b4:	737b      	strb	r3, [r7, #13]

	//MISO
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80005b6:	230e      	movs	r3, #14
 80005b8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f983 	bl	80008c8 <GPIO_Init>

	//SCK
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80005c2:	230d      	movs	r3, #13
 80005c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f97d 	bl	80008c8 <GPIO_Init>

	//NSS
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80005ce:	230c      	movs	r3, #12
 80005d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI2Pins);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 f977 	bl	80008c8 <GPIO_Init>

}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020400 	.word	0x40020400

080005e8 <SPI2_Inits>:

void SPI2_Inits(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;
	SPI2Handle.pSPIx = SPI2;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <SPI2_Inits+0x38>)
 80005f0:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80005f2:	2301      	movs	r3, #1
 80005f4:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80005f6:	2301      	movs	r3, #1
 80005f8:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPD_DIV8;
 80005fa:	2302      	movs	r3, #2
 80005fc:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80005fe:	2300      	movs	r3, #0
 8000600:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //HARDWARE slave management enabled for NSS pin
 800060a:	2300      	movs	r3, #0
 800060c:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 800060e:	463b      	mov	r3, r7
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fb5f 	bl	8000cd4 <SPI_Init>

}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40003800 	.word	0x40003800

08000624 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	GpioBtn.pGPIOx = GPIOA;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <GPIO_ButtonInit+0x2c>)
 800062c:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800062e:	2300      	movs	r3, #0
 8000630:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000632:	2300      	movs	r3, #0
 8000634:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000636:	2302      	movs	r3, #2
 8000638:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800063a:	2300      	movs	r3, #0
 800063c:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GpioBtn);
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f941 	bl	80008c8 <GPIO_Init>
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020000 	.word	0x40020000

08000654 <delay>:

void delay(void) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i > 500000 / 2; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e002      	b.n	8000666 <delay+0x12>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <delay+0x28>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d8f8      	bhi.n	8000660 <delay+0xc>
		;
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	0003d090 	.word	0x0003d090

08000680 <SPI_VeriResponse>:

uint8_t SPI_VeriResponse(uint8_t ackbyte) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == 0xF5) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2bf5      	cmp	r3, #245	; 0xf5
 800068e:	d101      	bne.n	8000694 <SPI_VeriResponse+0x14>
		//ACK
		return 1;
 8000690:	2301      	movs	r3, #1
 8000692:	e000      	b.n	8000696 <SPI_VeriResponse+0x16>
	}
	return 0; //NACK
 8000694:	2300      	movs	r3, #0

}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 fc0f 	bl	8000ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fd8f 	bl	80001f8 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006e8:	08000f80 	.word	0x08000f80
  ldr r2, =_sbss
 80006ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f0:	2000001c 	.word	0x2000001c

080006f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <GPIO_PeriClockControl>:
 *
 * @Note
 *
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) //enable or disable the peripheral clock
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d162      	bne.n	80007d0 <GPIO_PeriClockControl+0xd8>

		if(pGPIOx == GPIOA){
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a64      	ldr	r2, [pc, #400]	; (80008a0 <GPIO_PeriClockControl+0x1a8>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000712:	4b64      	ldr	r3, [pc, #400]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a63      	ldr	r2, [pc, #396]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOI_PCLK_DI();
		}

	}

}
 800071e:	e0b9      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOB){
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a61      	ldr	r2, [pc, #388]	; (80008a8 <GPIO_PeriClockControl+0x1b0>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000728:	4b5e      	ldr	r3, [pc, #376]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	4a5d      	ldr	r2, [pc, #372]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800072e:	f043 0302 	orr.w	r3, r3, #2
 8000732:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000734:	e0ae      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOC){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a5c      	ldr	r2, [pc, #368]	; (80008ac <GPIO_PeriClockControl+0x1b4>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d106      	bne.n	800074c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800073e:	4b59      	ldr	r3, [pc, #356]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a58      	ldr	r2, [pc, #352]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
}
 800074a:	e0a3      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOD){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a58      	ldr	r2, [pc, #352]	; (80008b0 <GPIO_PeriClockControl+0x1b8>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000754:	4b53      	ldr	r3, [pc, #332]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000758:	4a52      	ldr	r2, [pc, #328]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000760:	e098      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOE){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a53      	ldr	r2, [pc, #332]	; (80008b4 <GPIO_PeriClockControl+0x1bc>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800076a:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a4d      	ldr	r2, [pc, #308]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000776:	e08d      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOF){
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a4f      	ldr	r2, [pc, #316]	; (80008b8 <GPIO_PeriClockControl+0x1c0>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d106      	bne.n	800078e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000780:	4b48      	ldr	r3, [pc, #288]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000784:	4a47      	ldr	r2, [pc, #284]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800078c:	e082      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOG){
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a4a      	ldr	r2, [pc, #296]	; (80008bc <GPIO_PeriClockControl+0x1c4>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a42      	ldr	r2, [pc, #264]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007a2:	e077      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOH){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a46      	ldr	r2, [pc, #280]	; (80008c0 <GPIO_PeriClockControl+0x1c8>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d106      	bne.n	80007ba <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80007ac:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a3c      	ldr	r2, [pc, #240]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b8:	e06c      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOI){
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a41      	ldr	r2, [pc, #260]	; (80008c4 <GPIO_PeriClockControl+0x1cc>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d168      	bne.n	8000894 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a37      	ldr	r2, [pc, #220]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007ce:	e061      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <GPIO_PeriClockControl+0x1a8>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d106      	bne.n	80007e6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a31      	ldr	r2, [pc, #196]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007e4:	e056      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOB){
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <GPIO_PeriClockControl+0x1b0>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 80007f4:	f023 0302 	bic.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007fa:	e04b      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOC){
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <GPIO_PeriClockControl+0x1b4>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000804:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800080a:	f023 0304 	bic.w	r3, r3, #4
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	e040      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOD){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <GPIO_PeriClockControl+0x1b8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d106      	bne.n	8000828 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800081a:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000820:	f023 0308 	bic.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000826:	e035      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOE){
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <GPIO_PeriClockControl+0x1bc>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d106      	bne.n	800083e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000834:	4a1b      	ldr	r2, [pc, #108]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000836:	f023 0310 	bic.w	r3, r3, #16
 800083a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800083c:	e02a      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOF){
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <GPIO_PeriClockControl+0x1c0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d106      	bne.n	8000854 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800084c:	f023 0320 	bic.w	r3, r3, #32
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000852:	e01f      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOG){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a19      	ldr	r2, [pc, #100]	; (80008bc <GPIO_PeriClockControl+0x1c4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d106      	bne.n	800086a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800085e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000860:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000866:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000868:	e014      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOH){
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4a14      	ldr	r2, [pc, #80]	; (80008c0 <GPIO_PeriClockControl+0x1c8>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d106      	bne.n	8000880 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 8000878:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800087e:	e009      	b.n	8000894 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx==GPIOI){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a10      	ldr	r2, [pc, #64]	; (80008c4 <GPIO_PeriClockControl+0x1cc>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d105      	bne.n	8000894 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800088a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088c:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <GPIO_PeriClockControl+0x1ac>)
 800088e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000892:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	40020000 	.word	0x40020000
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40020800 	.word	0x40020800
 80008b0:	40020c00 	.word	0x40020c00
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40021400 	.word	0x40021400
 80008bc:	40021800 	.word	0x40021800
 80008c0:	40021c00 	.word	0x40021c00
 80008c4:	40022000 	.word	0x40022000

080008c8 <GPIO_Init>:
 *
 * @Note		-
 *
 */
void GPIO_Init	(GPIO_Handle_t *pGPIOHandle) //take pointer to the handle structure
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
	//Enable Peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2101      	movs	r1, #1
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff0c 	bl	80006f8 <GPIO_PeriClockControl>

	//1. Configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <=GPIO_MODE_ANALOG){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	795b      	ldrb	r3, [r3, #5]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d81f      	bhi.n	8000928 <GPIO_Init+0x60>
		//non interrupt mode

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	461a      	mov	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	791b      	ldrb	r3, [r3, #4]
 8000904:	4619      	mov	r1, r3
 8000906:	2303      	movs	r3, #3
 8000908:	408b      	lsls	r3, r1
 800090a:	43db      	mvns	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	400a      	ands	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	697a      	ldr	r2, [r7, #20]
 8000922:	430a      	orrs	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	e0c2      	b.n	8000aae <GPIO_Init+0x1e6>

	}else
	{
		if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_MODE_IT_FT)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d117      	bne.n	8000960 <GPIO_Init+0x98>
		{
			//1. Config the falling trigger selection register(FTSR)

			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000930:	4b47      	ldr	r3, [pc, #284]	; (8000a50 <GPIO_Init+0x188>)
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	7912      	ldrb	r2, [r2, #4]
 8000938:	4611      	mov	r1, r2
 800093a:	2201      	movs	r2, #1
 800093c:	408a      	lsls	r2, r1
 800093e:	4611      	mov	r1, r2
 8000940:	4a43      	ldr	r2, [pc, #268]	; (8000a50 <GPIO_Init+0x188>)
 8000942:	430b      	orrs	r3, r1
 8000944:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000946:	4b42      	ldr	r3, [pc, #264]	; (8000a50 <GPIO_Init+0x188>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	7912      	ldrb	r2, [r2, #4]
 800094e:	4611      	mov	r1, r2
 8000950:	2201      	movs	r2, #1
 8000952:	408a      	lsls	r2, r1
 8000954:	43d2      	mvns	r2, r2
 8000956:	4611      	mov	r1, r2
 8000958:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <GPIO_Init+0x188>)
 800095a:	400b      	ands	r3, r1
 800095c:	6093      	str	r3, [r2, #8]
 800095e:	e035      	b.n	80009cc <GPIO_Init+0x104>


		}else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_MODE_IT_RT)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	2b05      	cmp	r3, #5
 8000966:	d117      	bne.n	8000998 <GPIO_Init+0xd0>
		{
			//1. Config the rising tiggr selection register(RTSR)
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000968:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <GPIO_Init+0x188>)
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7912      	ldrb	r2, [r2, #4]
 8000970:	4611      	mov	r1, r2
 8000972:	2201      	movs	r2, #1
 8000974:	408a      	lsls	r2, r1
 8000976:	4611      	mov	r1, r2
 8000978:	4a35      	ldr	r2, [pc, #212]	; (8000a50 <GPIO_Init+0x188>)
 800097a:	430b      	orrs	r3, r1
 800097c:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <GPIO_Init+0x188>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	7912      	ldrb	r2, [r2, #4]
 8000986:	4611      	mov	r1, r2
 8000988:	2201      	movs	r2, #1
 800098a:	408a      	lsls	r2, r1
 800098c:	43d2      	mvns	r2, r2
 800098e:	4611      	mov	r1, r2
 8000990:	4a2f      	ldr	r2, [pc, #188]	; (8000a50 <GPIO_Init+0x188>)
 8000992:	400b      	ands	r3, r1
 8000994:	60d3      	str	r3, [r2, #12]
 8000996:	e019      	b.n	80009cc <GPIO_Init+0x104>

		}else if ((pGPIOHandle->GPIO_PinConfig.GPIO_PinMode)==GPIO_MODE_IT_RFT)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	795b      	ldrb	r3, [r3, #5]
 800099c:	2b06      	cmp	r3, #6
 800099e:	d115      	bne.n	80009cc <GPIO_Init+0x104>
		{
			//1. Cofig both RTSR AND FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009a0:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <GPIO_Init+0x188>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	7912      	ldrb	r2, [r2, #4]
 80009a8:	4611      	mov	r1, r2
 80009aa:	2201      	movs	r2, #1
 80009ac:	408a      	lsls	r2, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a27      	ldr	r2, [pc, #156]	; (8000a50 <GPIO_Init+0x188>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <GPIO_Init+0x188>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	7912      	ldrb	r2, [r2, #4]
 80009be:	4611      	mov	r1, r2
 80009c0:	2201      	movs	r2, #1
 80009c2:	408a      	lsls	r2, r1
 80009c4:	4611      	mov	r1, r2
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <GPIO_Init+0x188>)
 80009c8:	430b      	orrs	r3, r1
 80009ca:	6093      	str	r3, [r2, #8]
		}
		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) / 4;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	791b      	ldrb	r3, [r3, #4]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) % 4;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	f003 0303 	and.w	r3, r3, #3
 80009dc:	74bb      	strb	r3, [r7, #18]
		uint32_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <GPIO_Init+0x18c>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d045      	beq.n	8000a74 <GPIO_Init+0x1ac>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a1a      	ldr	r2, [pc, #104]	; (8000a58 <GPIO_Init+0x190>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d02b      	beq.n	8000a4a <GPIO_Init+0x182>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <GPIO_Init+0x194>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d024      	beq.n	8000a46 <GPIO_Init+0x17e>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a17      	ldr	r2, [pc, #92]	; (8000a60 <GPIO_Init+0x198>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d01d      	beq.n	8000a42 <GPIO_Init+0x17a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <GPIO_Init+0x19c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d016      	beq.n	8000a3e <GPIO_Init+0x176>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <GPIO_Init+0x1a0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00f      	beq.n	8000a3a <GPIO_Init+0x172>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <GPIO_Init+0x1a4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d008      	beq.n	8000a36 <GPIO_Init+0x16e>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a11      	ldr	r2, [pc, #68]	; (8000a70 <GPIO_Init+0x1a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <GPIO_Init+0x16a>
 8000a2e:	2307      	movs	r3, #7
 8000a30:	e021      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a32:	2300      	movs	r3, #0
 8000a34:	e01f      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a36:	2306      	movs	r3, #6
 8000a38:	e01d      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	e01b      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a3e:	2304      	movs	r3, #4
 8000a40:	e019      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a42:	2303      	movs	r3, #3
 8000a44:	e017      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a46:	2302      	movs	r3, #2
 8000a48:	e015      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e013      	b.n	8000a76 <GPIO_Init+0x1ae>
 8000a4e:	bf00      	nop
 8000a50:	40013c00 	.word	0x40013c00
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40021400 	.word	0x40021400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40021c00 	.word	0x40021c00
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
		SYSCFG_PCLK_EN();
 8000a78:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <GPIO_Init+0x324>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7c:	4a5b      	ldr	r2, [pc, #364]	; (8000bec <GPIO_Init+0x324>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a82:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2*4);
 8000a84:	7cbb      	ldrb	r3, [r7, #18]
 8000a86:	009a      	lsls	r2, r3, #2
 8000a88:	4859      	ldr	r0, [pc, #356]	; (8000bf0 <GPIO_Init+0x328>)
 8000a8a:	7cfb      	ldrb	r3, [r7, #19]
 8000a8c:	68f9      	ldr	r1, [r7, #12]
 8000a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a92:	3302      	adds	r3, #2
 8000a94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]


		//3. enable the exit interrupt delivery using IMR (Interrupt mask register)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a98:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <GPIO_Init+0x32c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	7912      	ldrb	r2, [r2, #4]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	408a      	lsls	r2, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4a52      	ldr	r2, [pc, #328]	; (8000bf4 <GPIO_Init+0x32c>)
 8000aaa:	430b      	orrs	r3, r1
 8000aac:	6013      	str	r3, [r2, #0]

	}

	temp=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
	//2. Configure Speed
	temp =  (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed<<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	799b      	ldrb	r3, [r3, #6]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	791b      	ldrb	r3, [r3, #4]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	408b      	lsls	r3, r1
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	400a      	ands	r2, r1
 8000ade:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6899      	ldr	r1, [r3, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	430a      	orrs	r2, r1
 8000aee:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
	//3. Configure the pupd settings
	temp =  (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<(2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	79db      	ldrb	r3, [r3, #7]
 8000af8:	461a      	mov	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	791b      	ldrb	r3, [r3, #4]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68da      	ldr	r2, [r3, #12]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	791b      	ldrb	r3, [r3, #4]
 8000b10:	4619      	mov	r1, r3
 8000b12:	2303      	movs	r3, #3
 8000b14:	408b      	lsls	r3, r1
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4619      	mov	r1, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	400a      	ands	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68d9      	ldr	r1, [r3, #12]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
	//4. Configure optype
	temp =  (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	7a1b      	ldrb	r3, [r3, #8]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	4619      	mov	r1, r3
 8000b52:	2301      	movs	r3, #1
 8000b54:	408b      	lsls	r3, r1
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	400a      	ands	r2, r1
 8000b60:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6859      	ldr	r1, [r3, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	430a      	orrs	r2, r1
 8000b70:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
	//5. Configure the alt functionality
	/* in GPIO_PinConfig_t structure, the alternate functionality mode (variable GPIO_PinAltFunMode) only applicable when the mode is set to alternate function mode
	 * (which means pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALFN), so that we have the condition below */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	795b      	ldrb	r3, [r3, #5]
 8000b7a:	2b02      	cmp	r3, #2
 8000b7c:	d131      	bne.n	8000be2 <GPIO_Init+0x31a>
	{
		//	configure alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	791b      	ldrb	r3, [r3, #4]
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	791b      	ldrb	r3, [r3, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF<<(4*temp2)); //clearing
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7afa      	ldrb	r2, [r7, #11]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b9c:	7abb      	ldrb	r3, [r7, #10]
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	220f      	movs	r2, #15
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	7afa      	ldrb	r2, [r7, #11]
 8000bb0:	4001      	ands	r1, r0
 8000bb2:	3208      	adds	r2, #8
 8000bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	7afa      	ldrb	r2, [r7, #11]
 8000bbe:	3208      	adds	r2, #8
 8000bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7a5b      	ldrb	r3, [r3, #9]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	7abb      	ldrb	r3, [r7, #10]
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	7afa      	ldrb	r2, [r7, #11]
 8000bda:	4301      	orrs	r1, r0
 8000bdc:	3208      	adds	r2, #8
 8000bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40013800 	.word	0x40013800
 8000bf4:	40013c00 	.word	0x40013c00

08000bf8 <GPIO_ReadFromInputPin>:
 * @Return		-0 or 1
 *
 * @Note		-
 *
 */
uint8_t GPIO_ReadFromInputPin	(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR>> PinNumber) & 0x00000001);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691a      	ldr	r2, [r3, #16]
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
	return value;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SPI_PeriClockControl>:
 *
 * @Note
 *
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]

	if (EnorDi == DISABLE)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d120      	bne.n	8000c78 <SPI_PeriClockControl+0x54>
	{
		if (pSPIx == SPI1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <SPI_PeriClockControl+0xa0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d106      	bne.n	8000c4c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_DI();
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c48:	6453      	str	r3, [r2, #68]	; 0x44
		}else if (pSPIx ==  SPI3)
		{
			SPI3_PCLK_EN();
		}
	}
}
 8000c4a:	e035      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <SPI_PeriClockControl+0xa8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d106      	bne.n	8000c62 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_DI();
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c60:	e02a      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx ==  SPI3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a1a      	ldr	r2, [pc, #104]	; (8000cd0 <SPI_PeriClockControl+0xac>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d126      	bne.n	8000cb8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c76:	e01f      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		if (pSPIx == SPI1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <SPI_PeriClockControl+0xa0>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d106      	bne.n	8000c8e <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_EN();
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c8a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c8c:	e014      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx == SPI2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <SPI_PeriClockControl+0xa8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d106      	bne.n	8000ca4 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_EN();
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ca2:	e009      	b.n	8000cb8 <SPI_PeriClockControl+0x94>
		}else if (pSPIx ==  SPI3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <SPI_PeriClockControl+0xac>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d105      	bne.n	8000cb8 <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SPI_PeriClockControl+0xa4>)
 8000cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40003800 	.word	0x40003800
 8000cd0:	40003c00 	.word	0x40003c00

08000cd4 <SPI_Init>:
 *
 * @Note		-
 *
 */
void SPI_Init	(SPI_Handle_t *pSPIHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	//Peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ff9e 	bl	8000c24 <SPI_PeriClockControl>

	//First configure the SPI_CR1 register
	uint32_t temp = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
	//1. configure device mode (master or slave)
	temp |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	791b      	ldrb	r3, [r3, #4]
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
	//2. configure bus configuration
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	795b      	ldrb	r3, [r3, #5]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d104      	bne.n	8000d0c <SPI_Init+0x38>
	{
		//BIDI must be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e014      	b.n	8000d36 <SPI_Init+0x62>

	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	795b      	ldrb	r3, [r3, #5]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d104      	bne.n	8000d1e <SPI_Init+0x4a>
	{
		//BIDI must be set
		temp |= (1<<SPI_CR1_BIDIMODE);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	e00b      	b.n	8000d36 <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	795b      	ldrb	r3, [r3, #5]
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	d107      	bne.n	8000d36 <SPI_Init+0x62>
	{
		//BIDI must be cleared
		temp &= ~(1<<SPI_CR1_BIDIMODE);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d2c:	60fb      	str	r3, [r7, #12]
		//RXONLY must be set
		temp |= (1<<SPI_CR1_RXONLY);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d34:	60fb      	str	r3, [r7, #12]
	}
	//3. Configure the SPI peripheral clock speed
	temp |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	799b      	ldrb	r3, [r3, #6]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
	//4. Configure DFF
	temp |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	79db      	ldrb	r3, [r3, #7]
 8000d48:	02db      	lsls	r3, r3, #11
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
	//5. Configure CPOL
	temp |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7a1b      	ldrb	r3, [r3, #8]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	461a      	mov	r2, r3
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
	//6. Configure CPHA
	temp |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7a5b      	ldrb	r3, [r3, #9]
 8000d64:	461a      	mov	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	601a      	str	r2, [r3, #0]

}
 8000d74:	bf00      	nop
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <SPI_GetFlagStatus>:
		SPI3_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t Flagname)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	if (pSPIx->SR & Flagname){
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <SPI_SendData>:
 * @Note		- This is blocking call
 *
 */
void SPI_SendData (SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)

{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	while (Len>0)
 8000db0:	e026      	b.n	8000e00 <SPI_SendData+0x5c>
	{
		//1. wait until TXE is set
	while(!(pSPIx->SR & (1<<SPI_SR_TXE)));//wait if while(1)
 8000db2:	bf00      	nop
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0f9      	beq.n	8000db4 <SPI_SendData+0x10>
		//2. check the DFF bit in CR1
	if (pSPIx->CR1 & (1<< SPI_CR1_DFF))
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00e      	beq.n	8000dea <SPI_SendData+0x46>
	{
		//16 bit data frame format
		//1. Load the data into DR
		pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	60da      	str	r2, [r3, #12]
		//2.Decrease the Length
		Len--;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
		Len--;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
		(uint16_t*)pTxBuffer ++;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	e00a      	b.n	8000e00 <SPI_SendData+0x5c>

	}else
	{
		//8 bit data frame format
		//1.Load the data into DR
		pSPIx->DR = *pTxBuffer;
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	60da      	str	r2, [r3, #12]
		//2. Decrease the length
		Len--;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
	while (Len>0)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1d5      	bne.n	8000db2 <SPI_SendData+0xe>
	}
	}
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SPI_ReceiveData>:
 *
 * @Note		-
 *
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx,uint8_t *pRxBuffer, uint32_t Len)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	while (Len >0)
 8000e20:	e026      	b.n	8000e70 <SPI_ReceiveData+0x5c>
	{
		//1.Wait until the RXNE buffer os non empty
		while (!(pSPIx->SR &(1<<SPI_SR_RXNE)));
 8000e22:	bf00      	nop
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0f9      	beq.n	8000e24 <SPI_ReceiveData+0x10>
		if (pSPIx->CR1 & (1<<SPI_CR1_DFF))
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d00e      	beq.n	8000e5a <SPI_ReceiveData+0x46>
		{
			//16Bit
			//Read data 2bytes
			*((uint16_t*)pRxBuffer) = pSPIx->DR ;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	801a      	strh	r2, [r3, #0]
			//Increment the RX buffer addr
			(uint16_t*)pRxBuffer++;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
			Len--;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	607b      	str	r3, [r7, #4]
			Len--;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3b01      	subs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	e00a      	b.n	8000e70 <SPI_ReceiveData+0x5c>

		}else
		{
			//8Bit
			//Read data 1byte
			*(pRxBuffer) = pSPIx->DR;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	701a      	strb	r2, [r3, #0]
			//Increment the RX buffer address
			pRxBuffer++;
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	3301      	adds	r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
			Len--;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
	while (Len >0)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1d5      	bne.n	8000e22 <SPI_ReceiveData+0xe>
		}

	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SPI_PeriControl>:
 *
 * @Note		-
 *
 */
void SPI_PeriControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d106      	bne.n	8000ea4 <SPI_PeriControl+0x20>
	{
		pSPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
	}else
	{
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);

	}
}
 8000ea2:	e005      	b.n	8000eb0 <SPI_PeriControl+0x2c>
		pSPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SPI_SSOEConfig>:
 *
 * @Note		-
 *
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnorDi)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi ==0)
 8000ec8:	78fb      	ldrb	r3, [r7, #3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d106      	bne.n	8000edc <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1<<SPI_CR2_SSOE);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f043 0204 	orr.w	r2, r3, #4
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	605a      	str	r2, [r3, #4]
	}else
	{
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
	}
}
 8000eda:	e005      	b.n	8000ee8 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1<<SPI_CR2_SSOE);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f023 0204 	bic.w	r2, r3, #4
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <__libc_init_array>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	4d0d      	ldr	r5, [pc, #52]	; (8000f2c <__libc_init_array+0x38>)
 8000ef8:	4c0d      	ldr	r4, [pc, #52]	; (8000f30 <__libc_init_array+0x3c>)
 8000efa:	1b64      	subs	r4, r4, r5
 8000efc:	10a4      	asrs	r4, r4, #2
 8000efe:	2600      	movs	r6, #0
 8000f00:	42a6      	cmp	r6, r4
 8000f02:	d109      	bne.n	8000f18 <__libc_init_array+0x24>
 8000f04:	4d0b      	ldr	r5, [pc, #44]	; (8000f34 <__libc_init_array+0x40>)
 8000f06:	4c0c      	ldr	r4, [pc, #48]	; (8000f38 <__libc_init_array+0x44>)
 8000f08:	f000 f818 	bl	8000f3c <_init>
 8000f0c:	1b64      	subs	r4, r4, r5
 8000f0e:	10a4      	asrs	r4, r4, #2
 8000f10:	2600      	movs	r6, #0
 8000f12:	42a6      	cmp	r6, r4
 8000f14:	d105      	bne.n	8000f22 <__libc_init_array+0x2e>
 8000f16:	bd70      	pop	{r4, r5, r6, pc}
 8000f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f1c:	4798      	blx	r3
 8000f1e:	3601      	adds	r6, #1
 8000f20:	e7ee      	b.n	8000f00 <__libc_init_array+0xc>
 8000f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f26:	4798      	blx	r3
 8000f28:	3601      	adds	r6, #1
 8000f2a:	e7f2      	b.n	8000f12 <__libc_init_array+0x1e>
 8000f2c:	08000f78 	.word	0x08000f78
 8000f30:	08000f78 	.word	0x08000f78
 8000f34:	08000f78 	.word	0x08000f78
 8000f38:	08000f7c 	.word	0x08000f7c

08000f3c <_init>:
 8000f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3e:	bf00      	nop
 8000f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f42:	bc08      	pop	{r3}
 8000f44:	469e      	mov	lr, r3
 8000f46:	4770      	bx	lr

08000f48 <_fini>:
 8000f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4a:	bf00      	nop
 8000f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4e:	bc08      	pop	{r3}
 8000f50:	469e      	mov	lr, r3
 8000f52:	4770      	bx	lr
